{"ast":null,"code":"class Api {\n  constructor(_ref) {\n    let {\n      baseUrl,\n      headers\n    } = _ref;\n    this._baseUrl = baseUrl;\n    this._headers = headers;\n  }\n  _handleResponse(res) {\n    console.log(res);\n    return res.ok ? res.json() : Promise.reject(`Ошибка: ${res.status}`);\n  }\n  getUserInfo() {\n    return fetch(`${this._baseUrl}/users/me`, {\n      headers: this._headers\n    }).then(this._handleResponse);\n  }\n  getInitialCards() {\n    return fetch(`${this._baseUrl}/cards`, {\n      headers: this._headers\n    }).then(this._handleResponse);\n  }\n  editUserInfo(_ref2) {\n    let {\n      name,\n      about\n    } = _ref2;\n    return fetch(`${this._baseUrl}/users/me`, {\n      method: 'PATCH',\n      headers: this._headers,\n      body: JSON.stringify({\n        name,\n        about\n      })\n    }).then(this._handleResponse);\n  }\n  addCard(_ref3) {\n    let {\n      name,\n      link\n    } = _ref3;\n    return fetch(`${this._baseUrl}/cards`, {\n      method: 'POST',\n      headers: this._headers,\n      body: JSON.stringify({\n        name,\n        link\n      })\n    }).then(this._handleResponse);\n  }\n  changeLikeCardStatus(cardId, isLiked) {\n    if (isLiked) {\n      return fetch(`${this._baseUrl}/cards/${cardId}/likes`, {\n        method: 'PUT',\n        headers: this._headers\n      }).then(this._handleResponse);\n    } else {\n      return fetch(`${this._baseUrl}/cards/${cardId}/likes`, {\n        method: 'DELETE',\n        headers: this._headers\n      }).then(this._handleResponse);\n    }\n  }\n  deleteCard(id) {\n    return fetch(`${this._baseUrl}/cards/${id}`, {\n      method: 'DELETE',\n      headers: this._headers\n    }).then(this._handleResponse);\n  }\n  updateProfileAvatar(avatarUrl) {\n    return fetch(`${this._baseUrl}/users/me/avatar`, {\n      method: 'PATCH',\n      headers: this._headers,\n      body: JSON.stringify({\n        avatar: avatarUrl\n      })\n    }).then(this._handleResponse);\n  }\n}\nconst api = new Api({\n  baseUrl: 'https://mesto.nomoreparties.co/v1/cohort-61',\n  headers: {\n    authorization: '52fc6959-8692-45e7-a047-982dcb1b275b',\n    'Content-Type': 'application/json'\n  }\n});\nexport default api;","map":{"version":3,"names":["Api","constructor","_ref","baseUrl","headers","_baseUrl","_headers","_handleResponse","res","console","log","ok","json","Promise","reject","status","getUserInfo","fetch","then","getInitialCards","editUserInfo","_ref2","name","about","method","body","JSON","stringify","addCard","_ref3","link","changeLikeCardStatus","cardId","isLiked","deleteCard","id","updateProfileAvatar","avatarUrl","avatar","api","authorization"],"sources":["/Users/olgapomytkina/YandexPraktikum/mesto-react/src/utils/Api.js"],"sourcesContent":["class Api {\n    constructor({baseUrl, headers}) {\n      this._baseUrl = baseUrl;\n      this._headers = headers;\n    }\n\n    _handleResponse(res) {\n      console.log(res);\n      return res.ok ? res.json() : Promise.reject(`Ошибка: ${res.status}`);\n    }\n  \n    getUserInfo() {\n      return fetch(`${this._baseUrl}/users/me`, {\n        headers: this._headers\n      })\n        .then(this._handleResponse);\n    }\n  \n    getInitialCards() {\n      return fetch(`${this._baseUrl}/cards`, {\n        headers: this._headers\n      })\n        .then(this._handleResponse);\n    }\n  \n    editUserInfo({ name, about }) {\n      return fetch(`${this._baseUrl}/users/me`, {\n        method: 'PATCH',\n        headers: this._headers,\n        body: JSON.stringify({ name, about })\n      })\n        .then(this._handleResponse);\n    }\n  \n    addCard({ name, link }) {\n      return fetch(`${this._baseUrl}/cards`, {\n        method: 'POST',\n        headers: this._headers,\n        body: JSON.stringify({ name, link })\n      })\n      .then(this._handleResponse);\n    }\n  \n    changeLikeCardStatus(cardId, isLiked) {\n      if(isLiked) {\n        return fetch(`${this._baseUrl}/cards/${cardId}/likes`, {\n          method: 'PUT',\n          headers: this._headers,\n        })\n        .then(this._handleResponse)\n      } else {\n        return fetch(`${this._baseUrl}/cards/${cardId}/likes`, {\n          method: 'DELETE',\n          headers: this._headers\n        })\n        .then(this._handleResponse);\n      }\n    }\n  \n    deleteCard(id) {\n      return fetch(`${this._baseUrl}/cards/${id}`, {\n        method: 'DELETE',\n        headers: this._headers\n      })\n      .then(this._handleResponse);\n    }\n  \n    updateProfileAvatar(avatarUrl) {\n      return fetch(`${this._baseUrl}/users/me/avatar`, {\n        method: 'PATCH',\n        headers: this._headers,\n        body: JSON.stringify({avatar: avatarUrl})\n      })\n      .then(this._handleResponse);\n      }\n    }\n\n    const api = new Api({\n        baseUrl: 'https://mesto.nomoreparties.co/v1/cohort-61',\n        headers: {\n          authorization: '52fc6959-8692-45e7-a047-982dcb1b275b',\n          'Content-Type': 'application/json'\n        }\n    })\n\n  export default api;"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}